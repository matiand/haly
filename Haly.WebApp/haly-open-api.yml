openapi: 3.0.1
info:
  title: Haly API
  description: An ASP.NET Core Web API that adds quality of life improvements to Spotify and helps with music exploration
  version: v1
paths:
  '/Albums/{id}':
    get:
      tags:
        - Albums
      summary: Get album
      description: Fetch album from Spotify<br/>This endpoint calls Spotify API.
      operationId: GetAlbum
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An album
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumDetailedDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Albums/{id}/recomendations':
    get:
      tags:
        - Albums
      summary: Get album recomendations
      description: Find similar albums to this one<br/>This endpoint calls Spotify API.
      operationId: GetAlbumRecomendations
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: trackIds
          in: query
          schema:
            type: string
      responses:
        '200':
          description: A list of albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReleaseItemDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Artists/{id}':
    get:
      tags:
        - Artists
      summary: Get artist
      description: Fetch artist from Spotify<br/>This endpoint calls Spotify API.
      operationId: GetArtist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDetailedDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Artists/{id}/discography':
    get:
      tags:
        - Artists
      summary: Get artist's discography
      description: Fetch releases created by the artist from Spotify<br/>This endpoint calls Spotify API.
      operationId: GetArtistDiscography
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of releases that belong to the artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDiscographyDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Artists/{id}/appearances':
    get:
      tags:
        - Artists
      summary: Get artist's appearances
      description: Fetch releases that the artist appears on from Spotify<br/>This endpoint calls Spotify API.
      operationId: GetArtistAppearances
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of releases the artist appears on
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistAppearancesDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Following/creators/contains:
    get:
      tags:
        - Following
      summary: Check if current user follows a creator
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-read </b>'
      operationId: CheckIfCurrentUserFollowsCreator
      parameters:
        - name: type
          in: query
          schema:
            allOf:
              - $ref: '#/components/schemas/CreatorType'
        - name: creatorId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Me/Following/creators/{id}':
    put:
      tags:
        - Following
      summary: Follow a creator
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>'
      operationId: FollowCreator
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            allOf:
              - $ref: '#/components/schemas/CreatorType'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Following
      summary: Unfollow a creator
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>'
      operationId: UnfollowCreator
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: type
          in: query
          schema:
            allOf:
              - $ref: '#/components/schemas/CreatorType'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Following/albums/contains:
    get:
      tags:
        - Following
      summary: Check if current user follows an album
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-read </b>'
      operationId: CheckIfCurrentUserFollowsAnAlbum
      parameters:
        - name: albumId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Me/Following/albums/{id}':
    put:
      tags:
        - Following
      summary: Follow an album
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>'
      operationId: FollowAlbum
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Following
      summary: Unfollow an album
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>'
      operationId: UnfollowAlbum
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Me/Following/playlists/{id}':
    put:
      tags:
        - Following
      summary: Save a playlist to your library
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-modify-public, playlist-modify-private </b>'
      operationId: FollowPlaylist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Following
      summary: Remove a playlist from your library
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-modify-public, playlist-modify-private </b>'
      operationId: UnfollowPlaylist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Following/tracks:
    put:
      tags:
        - Following
      summary: Save tracks to your 'Liked Songs' collection
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-modify </b>'
      operationId: FollowTracks
      parameters:
        - name: ids
          in: query
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Following
      summary: Remove tracks from your 'Liked Songs' collection
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-modify </b>'
      operationId: UnfollowTracks
      parameters:
        - name: ids
          in: query
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Jobs/playlist-tracks:
    post:
      tags:
        - Jobs
      summary: Refetch current user's playlist tracks
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-read-private </b>'
      operationId: RefetchCurrentUserPlaylistTracks
      responses:
        '200':
          description: Playlist tracks refetched
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me:
    put:
      tags:
        - Me
      summary: Update current user
      description: 'Updates the User linked with specified token by fetching him from Spotify API, creates a new one for first time clients. Successful response links that token with our CurrentUser, and allows us to use endpoints that call Spotify API.<br/><br/>This endpoint calls Spotify API.<br/>Scopes needed: <b> user-read-private </b>'
      operationId: PutCurrentUser
      requestBody:
        description: Spotify's access token. For debugging purposes you can visit <a href='https://developer.spotify.com/console/get-current-user' target='_blank'>Spotify Web Console</a> to get one.
        content:
          application/json:
            schema:
              type: string
          text/json:
            schema:
              type: string
          application/*+json:
            schema:
              type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserDto'
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/playlists:
    put:
      tags:
        - Me
      summary: Fetch current user's playlists from Spotify and update our cache if they're changed
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-read-private, playlist-read-collaborative </b>'
      operationId: PutMyPlaylists
      responses:
        '200':
          description: User playlists updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlaylistBriefDto'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/tracks:
    get:
      tags:
        - Me
      summary: Fetch current user's 'Liked Songs' collection from our cache
      operationId: GetMyLikedSongs
      responses:
        '200':
          description: '''Liked Songs'' collection'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMyLikedSongsResponse'
    put:
      tags:
        - Me
      summary: Fetch current user's 'Liked Songs' collection from Spotify and update our cache if it's changed
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-read </b>'
      operationId: PutMyLikedSongs
      responses:
        '204':
          description: '''Liked Songs'' collection updated'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/artists:
    get:
      tags:
        - Me
      summary: Fetch current user's followed artists from Spotify
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-read </b>'
      operationId: GetMyFollowedArtists
      responses:
        '200':
          description: A list of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowedArtistDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/top/artists:
    get:
      tags:
        - Me
      summary: Fetch current user's top artists from Spotify
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-top-read </b>'
      operationId: GetMyTopArtists
      responses:
        '200':
          description: A list of top artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopArtistDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/feed:
    get:
      tags:
        - Me
      summary: Fetch current user's feed
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-top-read, user-read-recently-played </b>'
      operationId: GetMyFeed
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFeedDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Player:
    get:
      tags:
        - Player
      summary: Get current playback state
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-read-playback-state </b>'
      operationId: GetPlaybackState
      responses:
        '200':
          description: Current playback state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaybackStateDto'
        '204':
          description: Playback is not active
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      tags:
        - Player
      summary: Transfer playback to a new device
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-modify-playback-state </b>'
      operationId: TransferPlayback
      parameters:
        - name: deviceId
          in: query
          schema:
            type: string
      responses:
        '204':
          description: Playback transferred
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Player/devices:
    get:
      tags:
        - Player
      summary: Get available devices that current user can connect to
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-read-playback-state </b>'
      operationId: GetAvailableDevices
      responses:
        '200':
          description: Devices found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Player/queue:
    get:
      tags:
        - Player
      summary: Get current user's track queue
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-read-playback-state </b>'
      operationId: GetQueue
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Player/recently-played:
    get:
      tags:
        - Player
      summary: Get current user's track history
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-read-recently-played </b>'
      operationId: GetRecentlyPlayed
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrackDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Player/shuffle:
    put:
      tags:
        - Player
      summary: Toggle shuffle on or off
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-modify-playback-state </b>'
      operationId: Shuffle
      parameters:
        - name: state
          in: query
          schema:
            type: boolean
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Player/repeat-mode:
    put:
      tags:
        - Player
      summary: Set the repeat mode for the user's playback
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-modify-playback-state </b>'
      operationId: SetRepeatMode
      parameters:
        - name: repeatMode
          in: query
          schema:
            type: string
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Player/play:
    put:
      tags:
        - Player
      summary: Resume playback of current context
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-modify-playback-state </b>'
      operationId: Play
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Player/pause:
    put:
      tags:
        - Player
      summary: Pause playback of current context
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-modify-playback-state </b>'
      operationId: Pause
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Player/playback:
    put:
      tags:
        - Player
      summary: Start new playback context
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-read-playback-state, user-modify-playback-state </b>'
      operationId: PutPlayback
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdatePlaybackCommand'
          text/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdatePlaybackCommand'
          application/*+json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdatePlaybackCommand'
      responses:
        '202':
          description: Accepted
        '404':
          description: Content is not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Playlists/{id}':
    get:
      tags:
        - Playlists
      summary: Get playlist
      description: Get playlist from our cache
      operationId: GetPlaylist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: sortOrder
          in: query
          description: 'Track sorting order. Allowed values: title, title_desc, artist, artist_desc, album, album_desc, added_at, added_at_desc, duration, duration_desc.'
          schema:
            type: string
      responses:
        '200':
          description: Playlist found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistWithTracksDto'
        '404':
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      tags:
        - Playlists
      summary: Update playlist
      description: Fetch playlist from Spotify and update our cache if it's changed<br/>This endpoint calls Spotify API.
      operationId: PutPlaylist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Playlist created
        '204':
          description: Playlist updated
        '404':
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Playlists/{playlistId}/tracks':
    get:
      tags:
        - Playlists
      summary: Get playlist's tracks
      description: Get playlist's tracks from our cache
      operationId: GetTracks
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Between 1 and 200 (inclusive).
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
        - name: sortOrder
          in: query
          description: 'Track sorting order. Allowed values: title, title_desc, artist, artist_desc, album, album_desc, added_at, added_at_desc, duration, duration_desc.'
          schema:
            type: string
        - name: searchTerm
          in: query
          description: 'Used for filtering tracks. Matches their name, album or artists.'
          schema:
            type: string
      responses:
        '200':
          description: Returns tracks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTracksDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
        '404':
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    post:
      tags:
        - Playlists
      summary: Add tracks to a playlist
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-modify-public, playlist-modify-private </b>'
      operationId: AddTracks
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/AddTracksRequestBody'
          text/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/AddTracksRequestBody'
          application/*+json:
            schema:
              allOf:
                - $ref: '#/components/schemas/AddTracksRequestBody'
      responses:
        '200':
          description: Tracks added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistBriefDto'
        '404':
          description: Playlist or tracks were not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '409':
          description: Duplicate tracks were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DuplicateProblem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Playlists/{playlistId}/details':
    put:
      tags:
        - Playlists
      summary: Update playlist details
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-modify-public, playlist-modify-private </b>'
      operationId: UpdatePlaylistDetails
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdatePlaylistDetailsRequestBody'
          text/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdatePlaylistDetailsRequestBody'
          application/*+json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdatePlaylistDetailsRequestBody'
      responses:
        '204':
          description: Playlist details updated
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Users/{id}':
    get:
      tags:
        - Users
      summary: Get user
      description: Fetch user from Spotify<br/>This endpoint calls Spotify API.
      operationId: GetUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Users/{userId}/playlists':
    get:
      tags:
        - Users
      summary: Get user's playlists
      description: 'Fetch a list of the playlists owned or followed by user from Spotify<br/>This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-read-collaborative </b>'
      operationId: GetPlaylists
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of playlists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlaylistCardDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Users/{userId}/playlist':
    post:
      tags:
        - Users
      summary: Create new playlist
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-modify-public </b>'
      operationId: CreatePlaylist
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistBriefDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  schemas:
    AddTracksRequestBody:
      required:
        - duplicatesStrategy
      type: object
      properties:
        collectionUri:
          type: string
          nullable: true
        trackUris:
          type: array
          items:
            type: string
          nullable: true
        duplicatesStrategy:
          allOf:
            - $ref: '#/components/schemas/DuplicatesStrategy'
      additionalProperties: false
    AlbumBriefDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
      additionalProperties: false
    AlbumDetailedDto:
      required:
        - artists
        - copyrights
        - formattedReleaseDate
        - id
        - name
        - releaseYear
        - totalDuration
        - tracks
        - type
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        type:
          type: string
        totalDuration:
          type: string
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistBriefDto'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/AlbumTrackDto'
        copyrights:
          type: array
          items:
            type: string
        releaseYear:
          type: string
        formattedReleaseDate:
          type: string
      additionalProperties: false
    AlbumTrackDto:
      required:
        - artists
        - discNumber
        - duration
        - id
        - isExplicit
        - isPlayable
        - name
        - playbackId
      type: object
      properties:
        id:
          type: string
        playbackId:
          type: string
        name:
          type: string
        duration:
          type: string
        uri:
          type: string
          nullable: true
        isPlayable:
          type: boolean
        isExplicit:
          type: boolean
        discNumber:
          type: integer
          format: int32
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistBriefDto'
      additionalProperties: false
    ArtistAppearancesDto:
      required:
        - albums
        - compilations
        - singlesAndEps
      type: object
      properties:
        albums:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
        singlesAndEps:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
        compilations:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
      additionalProperties: false
    ArtistBriefDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      additionalProperties: false
    ArtistDetailedDto:
      required:
        - followersTotal
        - genres
        - id
        - isFollowed
        - name
        - topTracks
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        genres:
          type: array
          items:
            type: string
        followersTotal:
          type: integer
          format: int32
        isFollowed:
          type: boolean
        highlightedPlaylist:
          allOf:
            - $ref: '#/components/schemas/HighlightedPlaylistDto'
          nullable: true
        topTracks:
          type: array
          items:
            $ref: '#/components/schemas/TrackDto'
      additionalProperties: false
    ArtistDiscographyDto:
      required:
        - albums
        - all
        - compilations
        - singlesAndEps
      type: object
      properties:
        all:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
        singlesAndEps:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
        compilations:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
      additionalProperties: false
    CreatorType:
      enum:
        - Artist
        - User
      type: string
    DeviceDto:
      required:
        - id
        - isActive
        - name
        - type
        - volume
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        isActive:
          type: boolean
        type:
          type: string
        volume:
          type: number
          format: double
      additionalProperties: false
    DuplicateProblem:
      required:
        - duplicateType
        - playlistId
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        status:
          type: integer
          format: int32
        title:
          type: string
        playlistId:
          type: string
        duplicateType:
          allOf:
            - $ref: '#/components/schemas/DuplicateType'
      additionalProperties: false
    DuplicateType:
      enum:
        - None
        - Some
        - All
      type: string
    DuplicatesStrategy:
      enum:
        - FailWhenAnyDuplicate
        - AddNewOnes
        - AddAll
      type: string
    FollowedArtistDto:
      required:
        - followersTotal
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        followersTotal:
          type: integer
          format: int32
      additionalProperties: false
    GetMyLikedSongsResponse:
      required:
        - likedSongIdByPlaybackId
      type: object
      properties:
        likedSongIdByPlaybackId:
          type: object
          additionalProperties:
            type: string
      additionalProperties: false
    HighlightedPlaylistDto:
      required:
        - id
        - name
        - ownerName
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        ownerName:
          type: string
      additionalProperties: false
    OwnerBriefDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      additionalProperties: false
    PaginatedTracksDto:
      required:
        - page
        - totalDuration
      type: object
      properties:
        page:
          allOf:
            - $ref: '#/components/schemas/PlaylistTrackDtoPaginatedList'
        totalDuration:
          type: string
      additionalProperties: false
    PlaybackContextDto:
      required:
        - entityId
        - type
      type: object
      properties:
        entityId:
          type: string
        type:
          type: string
      additionalProperties: false
    PlaybackStateDto:
      required:
        - device
      type: object
      properties:
        device:
          allOf:
            - $ref: '#/components/schemas/DeviceDto'
        context:
          allOf:
            - $ref: '#/components/schemas/PlaybackContextDto'
          nullable: true
      additionalProperties: false
    PlaylistBriefDto:
      required:
        - id
        - name
        - ownerId
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        ownerId:
          type: string
        imageUrl:
          type: string
          nullable: true
      additionalProperties: false
    PlaylistCardDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    PlaylistTrackDto:
      required:
        - addedAt
        - album
        - artists
        - duration
        - isExplicit
        - isPlayable
        - isSong
        - name
        - positionInPlaylist
      type: object
      properties:
        id:
          type: string
          nullable: true
        playbackId:
          type: string
          nullable: true
        positionInPlaylist:
          type: integer
          format: int32
        name:
          type: string
        duration:
          type: string
        uri:
          type: string
          nullable: true
        isPlayable:
          type: boolean
        isExplicit:
          type: boolean
        isSong:
          type: boolean
        addedAt:
          type: string
          format: date-time
        album:
          allOf:
            - $ref: '#/components/schemas/AlbumBriefDto'
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistBriefDto'
      additionalProperties: false
    PlaylistTrackDtoPaginatedList:
      required:
        - items
        - limit
        - offset
        - total
      type: object
      properties:
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/PlaylistTrackDto'
      additionalProperties: false
    PlaylistWithTracksDto:
      required:
        - id
        - isPersonalized
        - likesTotal
        - name
        - owner
        - totalDuration
        - tracks
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        likesTotal:
          type: integer
          format: int32
        owner:
          allOf:
            - $ref: '#/components/schemas/OwnerBriefDto'
        isPersonalized:
          type: boolean
        tracks:
          allOf:
            - $ref: '#/components/schemas/PlaylistTrackDtoPaginatedList'
        totalDuration:
          type: string
      additionalProperties: false
    PrivateUserDto:
      required:
        - canStreamTracks
        - id
        - likedSongsCollectionId
        - market
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        market:
          type: string
        imageUrl:
          type: string
          nullable: true
        canStreamTracks:
          type: boolean
        likedSongsCollectionId:
          type: string
      additionalProperties: false
    Problem:
      required:
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        status:
          type: integer
          format: int32
        title:
          type: string
      additionalProperties: false
    ReleaseItemDto:
      required:
        - artists
        - id
        - name
        - releaseYear
        - type
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        type:
          type: string
        releaseYear:
          type: integer
          format: int32
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistBriefDto'
      additionalProperties: false
    TopArtistDto:
      required:
        - genres
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        genres:
          type: array
          items:
            type: string
      additionalProperties: false
    TrackDto:
      required:
        - album
        - artists
        - duration
        - isExplicit
        - isPlayable
        - isSong
        - name
      type: object
      properties:
        id:
          type: string
          nullable: true
        playbackId:
          type: string
          nullable: true
        name:
          type: string
        duration:
          type: string
        uri:
          type: string
          nullable: true
        isPlayable:
          type: boolean
        isExplicit:
          type: boolean
        isSong:
          type: boolean
        album:
          allOf:
            - $ref: '#/components/schemas/AlbumBriefDto'
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistBriefDto'
      additionalProperties: false
    UpdatePlaybackCommand:
      required:
        - contextUri
        - withImprovedShuffle
      type: object
      properties:
        contextUri:
          type: string
        trackUri:
          type: string
          nullable: true
        withImprovedShuffle:
          type: boolean
      additionalProperties: false
    UpdatePlaylistDetailsRequestBody:
      required:
        - description
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      additionalProperties: false
    UserFeedDto:
      required:
        - albumsByCategory
        - playlists
      type: object
      properties:
        playlists:
          type: array
          items:
            $ref: '#/components/schemas/PlaylistCardDto'
        albumsByCategory:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ReleaseItemDto'
      additionalProperties: false
    UserProfileDto:
      required:
        - followersTotal
        - id
        - isFollowed
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        followersTotal:
          type: integer
          format: int32
        imageUrl:
          type: string
          nullable: true
        isFollowed:
          type: boolean
      additionalProperties: false
    ValidationProblem:
      required:
        - errors
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        status:
          type: integer
          format: int32
        title:
          type: string
        errors:
          type: array
          items:
            type: string
      additionalProperties: false
tags:
  - name: Me
  - name: Albums
  - name: Artists
  - name: Following
  - name: Jobs
  - name: Player
  - name: Playlists
  - name: Users