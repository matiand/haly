openapi: 3.0.1
info:
  title: Haly API
  description: An ASP.NET Core Web API that adds quality of life improvements to Spotify and helps with music exploration
  version: v1
paths:
  '/Albums/{id}':
    get:
      tags:
        - Albums
      summary: Get album
      description: Fetch album from Spotify<br/>This endpoint calls Spotify API.
      operationId: GetAlbum
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An album
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumDetailedDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Artists/{id}':
    get:
      tags:
        - Artists
      summary: Get artist
      description: Fetch artist from Spotify<br/>This endpoint calls Spotify API.
      operationId: GetArtist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: An artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDetailedDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Artists/{id}/discography':
    get:
      tags:
        - Artists
      summary: Get artist's discography
      description: Fetch releases created by the artist from Spotify<br/>This endpoint calls Spotify API.
      operationId: GetArtistDiscography
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of releases that belong to the artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDiscographyDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Artists/{id}/appearances':
    get:
      tags:
        - Artists
      summary: Get artist's appearances
      description: Fetch releases that the artist appears on from Spotify<br/>This endpoint calls Spotify API.
      operationId: GetArtistAppearances
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of releases the artist appears on
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistAppearancesDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /me/Following/contains:
    get:
      tags:
        - Following
      summary: Check if current user follows a creator
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-read </b>'
      operationId: CheckIfCurrentUserFollows
      parameters:
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/CreatorType'
        - name: creatorId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: boolean
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /me/Following:
    put:
      tags:
        - Following
      summary: Follow a creator
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>'
      operationId: Follow
      parameters:
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/CreatorType'
        - name: creatorId
          in: query
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    delete:
      tags:
        - Following
      summary: Unfollow a creator
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>'
      operationId: Unfollow
      parameters:
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/CreatorType'
        - name: creatorId
          in: query
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me:
    put:
      tags:
        - Me
      summary: Update current user
      description: 'Updates the User linked with specified token by fetching him from Spotify API, creates a new one for first time clients. Successful response links that token with our CurrentUser, and allows us to use endpoints that call Spotify API.<br/><br/>This endpoint calls Spotify API.<br/>Scopes needed: <b> user-read-private </b>'
      operationId: PutCurrentUser
      requestBody:
        description: Spotify's access token. For debugging purposes you can visit <a href='https://developer.spotify.com/console/get-current-user' target='_blank'>Spotify Web Console</a> to get one.
        content:
          application/json:
            schema:
              type: string
          text/json:
            schema:
              type: string
          application/*+json:
            schema:
              type: string
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserDto'
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateUserDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/playlists:
    put:
      tags:
        - Me
      summary: Fetch current user's playlists from Spotify and update our cache if they're changed
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-read-private, playlist-read-collaborative </b>'
      operationId: PutCurrentUserPlaylists
      responses:
        '200':
          description: User playlists updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlaylistBriefDto'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/tracks:
    put:
      tags:
        - Me
      summary: Fetch current user's 'Liked Songs' collection from Spotify and update our cache if it's changed
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-read </b>'
      operationId: PutCurrentUserLikedSongs
      responses:
        '200':
          description: '''Liked Songs'' updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistBriefDto'
        '201':
          description: '''Liked Songs'' created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistBriefDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/artists:
    get:
      tags:
        - Me
      summary: Fetch current user's followed artists from Spotify
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-read </b>'
      operationId: GetFollowedArtists
      responses:
        '200':
          description: A list of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowedArtistDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/top/artists:
    get:
      tags:
        - Me
      summary: Fetch current user's top artists from Spotify
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-top-read </b>'
      operationId: GetTopArtists
      responses:
        '200':
          description: A list of top artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopArtistDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  /Me/Player/devices:
    get:
      tags:
        - Player
      summary: Get available devices that current user can connect to
      description: 'This endpoint calls Spotify API.<br/>Scopes needed: <b> user-read-playback-state </b>'
      operationId: GetAvailableDevices
      responses:
        '200':
          description: Devices found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Playlists/{id}':
    get:
      tags:
        - Playlists
      summary: Get playlist
      description: Get playlist from our cache
      operationId: GetPlaylist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: sortOrder
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Playlist found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistWithTracksDto'
        '404':
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      tags:
        - Playlists
      summary: Update playlist
      description: Fetch playlist from Spotify and update our cache if it's changed<br/>This endpoint calls Spotify API.
      operationId: PutPlaylist
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Playlist created
        '204':
          description: Playlist updated
        '404':
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Playlists/{playlistId}/tracks':
    get:
      tags:
        - Playlists
      summary: Get playlist's tracks
      description: Get playlist's tracks from our cache
      operationId: GetTracks
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
        - name: sortOrder
          in: query
          schema:
            type: string
        - name: searchTerm
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Returns tracks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTracksDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationProblem'
        '404':
          description: Playlist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Users/{id}':
    get:
      tags:
        - Users
      summary: Get user
      description: Fetch user from Spotify<br/>This endpoint calls Spotify API.
      operationId: GetUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/Users/{userId}/playlists':
    get:
      tags:
        - Users
      summary: Get user's playlists
      description: 'Fetch a list of the playlists owned or followed by user from Spotify<br/>This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-read-collaborative </b>'
      operationId: GetPlaylists
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of playlists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlaylistCardDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  schemas:
    AlbumBriefDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
      additionalProperties: false
    AlbumDetailedDto:
      required:
        - artists
        - copyrights
        - formattedReleaseDate
        - id
        - name
        - releaseYear
        - totalDuration
        - tracks
        - type
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        type:
          type: string
        totalDuration:
          type: string
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistBriefDto'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/AlbumTrackDto'
        copyrights:
          type: array
          items:
            type: string
        releaseYear:
          type: string
        formattedReleaseDate:
          type: string
      additionalProperties: false
    AlbumTrackDto:
      required:
        - artists
        - discNumber
        - duration
        - isExplicit
        - isPlayable
        - name
        - spotifyId
      type: object
      properties:
        spotifyId:
          type: string
        name:
          type: string
        duration:
          type: string
        isPlayable:
          type: boolean
        isExplicit:
          type: boolean
        discNumber:
          type: integer
          format: int32
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistBriefDto'
      additionalProperties: false
    ArtistAppearancesDto:
      required:
        - albums
        - compilations
        - singlesAndEps
      type: object
      properties:
        albums:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
        singlesAndEps:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
        compilations:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
      additionalProperties: false
    ArtistBriefDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      additionalProperties: false
    ArtistDetailedDto:
      required:
        - followersTotal
        - genres
        - highlightedPlaylist
        - id
        - isFollowed
        - name
        - topTracks
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        genres:
          type: array
          items:
            type: string
        followersTotal:
          type: integer
          format: int32
        isFollowed:
          type: boolean
        highlightedPlaylist:
          $ref: '#/components/schemas/HighlightedPlaylistDto'
        topTracks:
          type: array
          items:
            $ref: '#/components/schemas/ArtistTopTrackDto'
      additionalProperties: false
    ArtistDiscographyDto:
      required:
        - albums
        - all
        - compilations
        - singlesAndEps
      type: object
      properties:
        all:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
        singlesAndEps:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
        compilations:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseItemDto'
      additionalProperties: false
    ArtistTopTrackDto:
      required:
        - album
        - artists
        - duration
        - isExplicit
        - isPlayable
        - name
        - spotifyId
      type: object
      properties:
        spotifyId:
          type: string
        name:
          type: string
        duration:
          type: string
        isPlayable:
          type: boolean
        isExplicit:
          type: boolean
        album:
          $ref: '#/components/schemas/AlbumBriefDto'
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistBriefDto'
      additionalProperties: false
    CreatorType:
      enum:
        - Artist
        - User
      type: string
    DeviceDto:
      required:
        - id
        - isActive
        - name
        - volumePercent
      type: object
      properties:
        id:
          type: string
        isActive:
          type: boolean
        name:
          type: string
        volumePercent:
          type: integer
          format: int32
      additionalProperties: false
    FollowedArtistDto:
      required:
        - followersTotal
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        followersTotal:
          type: integer
          format: int32
      additionalProperties: false
    HighlightedPlaylistDto:
      required:
        - id
        - name
        - ownerName
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        ownerName:
          type: string
      additionalProperties: false
    OwnerBriefDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      additionalProperties: false
    PaginatedTracksDto:
      required:
        - page
        - totalDuration
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PlaylistTrackDtoPaginatedList'
        totalDuration:
          type: string
      additionalProperties: false
    PlaylistBriefDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      additionalProperties: false
    PlaylistCardDto:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
      additionalProperties: false
    PlaylistMetadataDto:
      required:
        - likesTotal
        - owner
      type: object
      properties:
        description:
          type: string
          nullable: true
        imageUrl:
          type: string
          nullable: true
        likesTotal:
          type: integer
          format: int32
        owner:
          $ref: '#/components/schemas/OwnerBriefDto'
      additionalProperties: false
    PlaylistTrackDto:
      required:
        - addedAt
        - album
        - artists
        - duration
        - isExplicit
        - isPlayable
        - name
        - positionInPlaylist
        - type
      type: object
      properties:
        positionInPlaylist:
          type: integer
          format: int32
        name:
          type: string
        duration:
          type: string
        isPlayable:
          type: boolean
        isExplicit:
          type: boolean
        addedAt:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/PlaylistTrackType'
        album:
          $ref: '#/components/schemas/AlbumBriefDto'
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistBriefDto'
      additionalProperties: false
    PlaylistTrackDtoPaginatedList:
      required:
        - items
        - limit
        - offset
        - total
      type: object
      properties:
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/PlaylistTrackDto'
      additionalProperties: false
    PlaylistTrackType:
      enum:
        - Song
        - Podcast
      type: string
    PlaylistWithTracksDto:
      required:
        - id
        - isPersonalized
        - metadata
        - name
        - totalDuration
        - tracks
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        metadata:
          $ref: '#/components/schemas/PlaylistMetadataDto'
        isPersonalized:
          type: boolean
        tracks:
          $ref: '#/components/schemas/PlaylistTrackDtoPaginatedList'
        totalDuration:
          type: string
      additionalProperties: false
    PrivateUserDto:
      required:
        - canUseSpotifyPlayer
        - id
        - market
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        market:
          type: string
        imageUrl:
          type: string
          nullable: true
        canUseSpotifyPlayer:
          type: boolean
      additionalProperties: false
    Problem:
      required:
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        status:
          type: integer
          format: int32
        title:
          type: string
      additionalProperties: false
    ReleaseItemDto:
      required:
        - id
        - name
        - releaseYear
        - type
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        type:
          type: string
        releaseYear:
          type: integer
          format: int32
      additionalProperties: false
    TopArtistDto:
      required:
        - genres
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        imageUrl:
          type: string
          nullable: true
        genres:
          type: array
          items:
            type: string
      additionalProperties: false
    UserProfileDto:
      required:
        - followersTotal
        - id
        - isFollowed
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        followersTotal:
          type: integer
          format: int32
        imageUrl:
          type: string
          nullable: true
        isFollowed:
          type: boolean
      additionalProperties: false
    ValidationProblem:
      required:
        - errors
        - status
        - title
        - type
      type: object
      properties:
        type:
          type: string
        status:
          type: integer
          format: int32
        title:
          type: string
        errors:
          type: array
          items:
            type: string
      additionalProperties: false
tags:
  - name: Me
  - name: Albums
  - name: Artists
  - name: Following
  - name: Player
  - name: Playlists
  - name: Users