/* tslint:disable */
/* eslint-disable */
/**
 * Haly API
 * An ASP.NET Core Web API that adds quality of life improvements to Spotify and helps with music exploration
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AlbumTrack } from './AlbumTrack';
import {
    AlbumTrackFromJSON,
    AlbumTrackFromJSONTyped,
    AlbumTrackToJSON,
} from './AlbumTrack';
import type { AlbumType } from './AlbumType';
import {
    AlbumTypeFromJSON,
    AlbumTypeFromJSONTyped,
    AlbumTypeToJSON,
} from './AlbumType';
import type { ArtistBrief } from './ArtistBrief';
import {
    ArtistBriefFromJSON,
    ArtistBriefFromJSONTyped,
    ArtistBriefToJSON,
} from './ArtistBrief';

/**
 * 
 * @export
 * @interface AlbumDetailed
 */
export interface AlbumDetailed {
    /**
     * 
     * @type {string}
     * @memberof AlbumDetailed
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumDetailed
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AlbumDetailed
     */
    imageUrl?: string | null;
    /**
     * 
     * @type {AlbumType}
     * @memberof AlbumDetailed
     */
    type: AlbumType;
    /**
     * 
     * @type {Array<ArtistBrief>}
     * @memberof AlbumDetailed
     */
    artists: Array<ArtistBrief>;
    /**
     * 
     * @type {Array<AlbumTrack>}
     * @memberof AlbumDetailed
     */
    tracks: Array<AlbumTrack>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlbumDetailed
     */
    copyrights: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof AlbumDetailed
     */
    releaseDate: Date;
}

/**
 * Check if a given object implements the AlbumDetailed interface.
 */
export function instanceOfAlbumDetailed(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "artists" in value;
    isInstance = isInstance && "tracks" in value;
    isInstance = isInstance && "copyrights" in value;
    isInstance = isInstance && "releaseDate" in value;

    return isInstance;
}

export function AlbumDetailedFromJSON(json: any): AlbumDetailed {
    return AlbumDetailedFromJSONTyped(json, false);
}

export function AlbumDetailedFromJSONTyped(json: any, ignoreDiscriminator: boolean): AlbumDetailed {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'type': AlbumTypeFromJSON(json['type']),
        'artists': ((json['artists'] as Array<any>).map(ArtistBriefFromJSON)),
        'tracks': ((json['tracks'] as Array<any>).map(AlbumTrackFromJSON)),
        'copyrights': json['copyrights'],
        'releaseDate': (new Date(json['releaseDate'])),
    };
}

export function AlbumDetailedToJSON(value?: AlbumDetailed | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'imageUrl': value.imageUrl,
        'type': AlbumTypeToJSON(value.type),
        'artists': ((value.artists as Array<any>).map(ArtistBriefToJSON)),
        'tracks': ((value.tracks as Array<any>).map(AlbumTrackToJSON)),
        'copyrights': value.copyrights,
        'releaseDate': (value.releaseDate.toISOString().substr(0,10)),
    };
}

