/* tslint:disable */
/* eslint-disable */
/**
 * Haly API
 * An ASP.NET Core Web API that adds quality of life improvements to Spotify and helps with music exploration
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * One of ContextUri or TrackUri must be provided.
 * @export
 * @interface UpdatePlaybackRequestBody
 */
export interface UpdatePlaybackRequestBody {
    /**
     * The uri of a playlist, album or artist.
     * @type {string}
     * @memberof UpdatePlaybackRequestBody
     */
    contextUri?: string | null;
    /**
     * The track uri. Can be provided to instruct the API which track to begin playing in the newly established context. If no ContextUri is provided, only the specified track will be played.
     * @type {string}
     * @memberof UpdatePlaybackRequestBody
     */
    trackUri?: string | null;
    /**
     * Flag telling our API to shuffle the newly established context. Only valid when ContextUri is provided and shuffle is enabled.
     * @type {boolean}
     * @memberof UpdatePlaybackRequestBody
     */
    withImprovedShuffle: boolean;
}

/**
 * Check if a given object implements the UpdatePlaybackRequestBody interface.
 */
export function instanceOfUpdatePlaybackRequestBody(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "withImprovedShuffle" in value;

    return isInstance;
}

export function UpdatePlaybackRequestBodyFromJSON(json: any): UpdatePlaybackRequestBody {
    return UpdatePlaybackRequestBodyFromJSONTyped(json, false);
}

export function UpdatePlaybackRequestBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdatePlaybackRequestBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contextUri': !exists(json, 'contextUri') ? undefined : json['contextUri'],
        'trackUri': !exists(json, 'trackUri') ? undefined : json['trackUri'],
        'withImprovedShuffle': json['withImprovedShuffle'],
    };
}

export function UpdatePlaybackRequestBodyToJSON(value?: UpdatePlaybackRequestBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contextUri': value.contextUri,
        'trackUri': value.trackUri,
        'withImprovedShuffle': value.withImprovedShuffle,
    };
}

