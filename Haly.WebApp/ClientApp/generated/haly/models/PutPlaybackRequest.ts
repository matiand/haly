/* tslint:disable */
/* eslint-disable */
/**
 * Haly API
 * An ASP.NET Core Web API that adds quality of life improvements to Spotify and helps with music exploration
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UpdatePlaybackRequestBody } from './UpdatePlaybackRequestBody';
import {
    UpdatePlaybackRequestBodyFromJSON,
    UpdatePlaybackRequestBodyFromJSONTyped,
    UpdatePlaybackRequestBodyToJSON,
} from './UpdatePlaybackRequestBody';

/**
 * One of ContextUri or TrackUri must be provided.
 * @export
 * @interface PutPlaybackRequest
 */
export interface PutPlaybackRequest {
    /**
     * The uri of a playlist, album or artist.
     * @type {string}
     * @memberof PutPlaybackRequest
     */
    contextUri?: string | null;
    /**
     * The track uri. Can be provided to instruct the API which track to begin playing in the newly established context. If no ContextUri is provided, only the specified track will be played.
     * @type {string}
     * @memberof PutPlaybackRequest
     */
    trackUri?: string | null;
    /**
     * Flag telling our API to shuffle the newly established context. Only valid when ContextUri is provided and shuffle is enabled.
     * @type {boolean}
     * @memberof PutPlaybackRequest
     */
    withImprovedShuffle: boolean;
}

/**
 * Check if a given object implements the PutPlaybackRequest interface.
 */
export function instanceOfPutPlaybackRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "withImprovedShuffle" in value;

    return isInstance;
}

export function PutPlaybackRequestFromJSON(json: any): PutPlaybackRequest {
    return PutPlaybackRequestFromJSONTyped(json, false);
}

export function PutPlaybackRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PutPlaybackRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contextUri': !exists(json, 'contextUri') ? undefined : json['contextUri'],
        'trackUri': !exists(json, 'trackUri') ? undefined : json['trackUri'],
        'withImprovedShuffle': json['withImprovedShuffle'],
    };
}

export function PutPlaybackRequestToJSON(value?: PutPlaybackRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contextUri': value.contextUri,
        'trackUri': value.trackUri,
        'withImprovedShuffle': value.withImprovedShuffle,
    };
}

