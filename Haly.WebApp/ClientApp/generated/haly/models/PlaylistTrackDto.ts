/* tslint:disable */
/* eslint-disable */
/**
 * Haly API
 * An ASP.NET Core Web API that adds quality of life improvements to Spotify and helps with music exploration
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ArtistBriefDto } from './ArtistBriefDto';
import {
    ArtistBriefDtoFromJSON,
    ArtistBriefDtoFromJSONTyped,
    ArtistBriefDtoToJSON,
} from './ArtistBriefDto';
import type { PlaylistTrackDtoAlbum } from './PlaylistTrackDtoAlbum';
import {
    PlaylistTrackDtoAlbumFromJSON,
    PlaylistTrackDtoAlbumFromJSONTyped,
    PlaylistTrackDtoAlbumToJSON,
} from './PlaylistTrackDtoAlbum';
import type { PlaylistTrackType } from './PlaylistTrackType';
import {
    PlaylistTrackTypeFromJSON,
    PlaylistTrackTypeFromJSONTyped,
    PlaylistTrackTypeToJSON,
} from './PlaylistTrackType';

/**
 * 
 * @export
 * @interface PlaylistTrackDto
 */
export interface PlaylistTrackDto {
    /**
     * 
     * @type {number}
     * @memberof PlaylistTrackDto
     */
    positionInPlaylist: number;
    /**
     * 
     * @type {string}
     * @memberof PlaylistTrackDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PlaylistTrackDto
     */
    duration: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlaylistTrackDto
     */
    isPlayable: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PlaylistTrackDto
     */
    isExplicit: boolean;
    /**
     * 
     * @type {Date}
     * @memberof PlaylistTrackDto
     */
    addedAt: Date;
    /**
     * 
     * @type {PlaylistTrackType}
     * @memberof PlaylistTrackDto
     */
    type: PlaylistTrackType | null;
    /**
     * 
     * @type {PlaylistTrackDtoAlbum}
     * @memberof PlaylistTrackDto
     */
    album: PlaylistTrackDtoAlbum;
    /**
     * 
     * @type {Array<ArtistBriefDto>}
     * @memberof PlaylistTrackDto
     */
    artists: Array<ArtistBriefDto>;
}

/**
 * Check if a given object implements the PlaylistTrackDto interface.
 */
export function instanceOfPlaylistTrackDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "positionInPlaylist" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "duration" in value;
    isInstance = isInstance && "isPlayable" in value;
    isInstance = isInstance && "isExplicit" in value;
    isInstance = isInstance && "addedAt" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "album" in value;
    isInstance = isInstance && "artists" in value;

    return isInstance;
}

export function PlaylistTrackDtoFromJSON(json: any): PlaylistTrackDto {
    return PlaylistTrackDtoFromJSONTyped(json, false);
}

export function PlaylistTrackDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlaylistTrackDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'positionInPlaylist': json['positionInPlaylist'],
        'name': json['name'],
        'duration': json['duration'],
        'isPlayable': json['isPlayable'],
        'isExplicit': json['isExplicit'],
        'addedAt': (new Date(json['addedAt'])),
        'type': PlaylistTrackTypeFromJSON(json['type']),
        'album': PlaylistTrackDtoAlbumFromJSON(json['album']),
        'artists': ((json['artists'] as Array<any>).map(ArtistBriefDtoFromJSON)),
    };
}

export function PlaylistTrackDtoToJSON(value?: PlaylistTrackDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'positionInPlaylist': value.positionInPlaylist,
        'name': value.name,
        'duration': value.duration,
        'isPlayable': value.isPlayable,
        'isExplicit': value.isExplicit,
        'addedAt': (value.addedAt.toISOString()),
        'type': PlaylistTrackTypeToJSON(value.type),
        'album': PlaylistTrackDtoAlbumToJSON(value.album),
        'artists': ((value.artists as Array<any>).map(ArtistBriefDtoToJSON)),
    };
}

