/* tslint:disable */
/* eslint-disable */
/**
 * Haly API
 * An ASP.NET Core Web API that adds quality of life improvements to Spotify and helps with music exploration
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TrackSearchResultDto,
} from '../models';
import {
    TrackSearchResultDtoFromJSON,
    TrackSearchResultDtoToJSON,
} from '../models';

export interface SearchCacheUsingPlaybackDataRequest {
    playlistId?: string;
    trackPlaybackId?: string;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Find a track in the cache using playback data
     * Find track in the cache
     */
    async searchCacheUsingPlaybackDataRaw(requestParameters: SearchCacheUsingPlaybackDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackSearchResultDto>> {
        const queryParameters: any = {};

        if (requestParameters.playlistId !== undefined) {
            queryParameters['playlistId'] = requestParameters.playlistId;
        }

        if (requestParameters.trackPlaybackId !== undefined) {
            queryParameters['trackPlaybackId'] = requestParameters.trackPlaybackId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Search/playback`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackSearchResultDtoFromJSON(jsonValue));
    }

    /**
     * Find a track in the cache using playback data
     * Find track in the cache
     */
    async searchCacheUsingPlaybackData(requestParameters: SearchCacheUsingPlaybackDataRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackSearchResultDto> {
        const response = await this.searchCacheUsingPlaybackDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
