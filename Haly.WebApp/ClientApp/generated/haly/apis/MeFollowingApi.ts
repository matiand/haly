/* tslint:disable */
/* eslint-disable */
/**
 * Haly API
 * An ASP.NET Core Web API that adds quality of life improvements to Spotify and helps with music exploration
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatorType,
  Problem,
} from '../models';
import {
    CreatorTypeFromJSON,
    CreatorTypeToJSON,
    ProblemFromJSON,
    ProblemToJSON,
} from '../models';

export interface CheckIfCurrentUserFollowsAnAlbumRequest {
    albumId?: string;
}

export interface CheckIfCurrentUserFollowsCreatorRequest {
    type?: CreatorType;
    creatorId?: string;
}

export interface FollowAlbumRequest {
    id: string;
}

export interface FollowCreatorRequest {
    id: string;
    type?: CreatorType;
}

export interface FollowPlaylistRequest {
    id: string;
}

export interface FollowTracksRequest {
    requestBody?: Array<string>;
}

export interface UnfollowAlbumRequest {
    id: string;
}

export interface UnfollowCreatorRequest {
    id: string;
    type?: CreatorType;
}

export interface UnfollowPlaylistRequest {
    id: string;
}

export interface UnfollowTracksRequest {
    requestBody?: Array<string>;
}

/**
 * 
 */
export class MeFollowingApi extends runtime.BaseAPI {

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-read </b>
     * Check if current user follows an album
     */
    async checkIfCurrentUserFollowsAnAlbumRaw(requestParameters: CheckIfCurrentUserFollowsAnAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters.albumId !== undefined) {
            queryParameters['albumId'] = requestParameters.albumId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Me/Following/albums/contains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-read </b>
     * Check if current user follows an album
     */
    async checkIfCurrentUserFollowsAnAlbum(requestParameters: CheckIfCurrentUserFollowsAnAlbumRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.checkIfCurrentUserFollowsAnAlbumRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-read </b>
     * Check if current user follows a creator
     */
    async checkIfCurrentUserFollowsCreatorRaw(requestParameters: CheckIfCurrentUserFollowsCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Me/Following/creators/contains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-read </b>
     * Check if current user follows a creator
     */
    async checkIfCurrentUserFollowsCreator(requestParameters: CheckIfCurrentUserFollowsCreatorRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.checkIfCurrentUserFollowsCreatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Save an album to your library
     */
    async followAlbumRaw(requestParameters: FollowAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling followAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Me/Following/albums/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Save an album to your library
     */
    async followAlbum(requestParameters: FollowAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.followAlbumRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Make current user follow a creator
     */
    async followCreatorRaw(requestParameters: FollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling followCreator.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Me/Following/creators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Make current user follow a creator
     */
    async followCreator(requestParameters: FollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.followCreatorRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-modify-public, playlist-modify-private </b>
     * Save a playlist to your library
     */
    async followPlaylistRaw(requestParameters: FollowPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling followPlaylist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Me/Following/playlists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-modify-public, playlist-modify-private </b>
     * Save a playlist to your library
     */
    async followPlaylist(requestParameters: FollowPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.followPlaylistRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-modify </b>
     * Save tracks to your \'Liked Songs\' collection
     */
    async followTracksRaw(requestParameters: FollowTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Me/Following/tracks`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-modify </b>
     * Save tracks to your \'Liked Songs\' collection
     */
    async followTracks(requestParameters: FollowTracksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.followTracksRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Remove an album from your library
     */
    async unfollowAlbumRaw(requestParameters: UnfollowAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling unfollowAlbum.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Me/Following/albums/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Remove an album from your library
     */
    async unfollowAlbum(requestParameters: UnfollowAlbumRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unfollowAlbumRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Make current user unfollow a creator
     */
    async unfollowCreatorRaw(requestParameters: UnfollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling unfollowCreator.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Me/Following/creators/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Make current user unfollow a creator
     */
    async unfollowCreator(requestParameters: UnfollowCreatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unfollowCreatorRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-modify-public, playlist-modify-private </b>
     * Remove a playlist from your library
     */
    async unfollowPlaylistRaw(requestParameters: UnfollowPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling unfollowPlaylist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Me/Following/playlists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-modify-public, playlist-modify-private </b>
     * Remove a playlist from your library
     */
    async unfollowPlaylist(requestParameters: UnfollowPlaylistRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unfollowPlaylistRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-modify </b>
     * Remove tracks from your \'Liked Songs\' collection
     */
    async unfollowTracksRaw(requestParameters: UnfollowTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Me/Following/tracks`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-modify </b>
     * Remove tracks from your \'Liked Songs\' collection
     */
    async unfollowTracks(requestParameters: UnfollowTracksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unfollowTracksRaw(requestParameters, initOverrides);
    }

}
