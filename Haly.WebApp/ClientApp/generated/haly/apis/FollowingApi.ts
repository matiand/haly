/* tslint:disable */
/* eslint-disable */
/**
 * Haly API
 * An ASP.NET Core Web API that adds quality of life improvements to Spotify and helps with music exploration
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatorType,
  Problem,
} from '../models';
import {
    CreatorTypeFromJSON,
    CreatorTypeToJSON,
    ProblemFromJSON,
    ProblemToJSON,
} from '../models';

export interface CheckIfCurrentUserFollowsRequest {
    type?: CreatorType;
    creatorId?: string;
}

export interface FollowRequest {
    type?: CreatorType;
    creatorId?: string;
}

export interface UnfollowRequest {
    type?: CreatorType;
    creatorId?: string;
}

/**
 * 
 */
export class FollowingApi extends runtime.BaseAPI {

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-read </b>
     * Check if current user follows a creator
     */
    async checkIfCurrentUserFollowsRaw(requestParameters: CheckIfCurrentUserFollowsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/me/Following/contains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-read </b>
     * Check if current user follows a creator
     */
    async checkIfCurrentUserFollows(requestParameters: CheckIfCurrentUserFollowsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.checkIfCurrentUserFollowsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Follow a creator
     */
    async followRaw(requestParameters: FollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/me/Following`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Follow a creator
     */
    async follow(requestParameters: FollowRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.followRaw(requestParameters, initOverrides);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Unfollow a creator
     */
    async unfollowRaw(requestParameters: UnfollowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/me/Following`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-follow-modify </b>
     * Unfollow a creator
     */
    async unfollow(requestParameters: UnfollowRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.unfollowRaw(requestParameters, initOverrides);
    }

}
