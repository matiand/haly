/* tslint:disable */
/* eslint-disable */
/**
 * Haly API
 * An ASP.NET Core Web API that adds quality of life improvements to Spotify and helps with music exploration
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Problem,
  TrackDto,
  UserDto,
  UserPlaylistDto,
} from '../models';
import {
    ProblemFromJSON,
    ProblemToJSON,
    TrackDtoFromJSON,
    TrackDtoToJSON,
    UserDtoFromJSON,
    UserDtoToJSON,
    UserPlaylistDtoFromJSON,
    UserPlaylistDtoToJSON,
} from '../models';

export interface PutCurrentUserRequest {
    spotifyToken?: string;
}

/**
 * 
 */
export class MeApi extends runtime.BaseAPI {

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-read </b>
     * Get current user \'Liked Songs\' collection
     */
    async getLikedSongsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Me/tracks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackDtoFromJSON));
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> user-library-read </b>
     * Get current user \'Liked Songs\' collection
     */
    async getLikedSongs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackDto>> {
        const response = await this.getLikedSongsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates the User linked with specified token by fetching him from Spotify API, creates a new one for first time clients. Successful response links that token with our CurrentUser, and allows us to use endpoints that call Spotify API.<br/><br/>This endpoint calls Spotify API.<br/>Scopes needed: <b> user-read-private </b>
     * Update current user
     */
    async putCurrentUserRaw(requestParameters: PutCurrentUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        const queryParameters: any = {};

        if (requestParameters.spotifyToken !== undefined) {
            queryParameters['spotifyToken'] = requestParameters.spotifyToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Updates the User linked with specified token by fetching him from Spotify API, creates a new one for first time clients. Successful response links that token with our CurrentUser, and allows us to use endpoints that call Spotify API.<br/><br/>This endpoint calls Spotify API.<br/>Scopes needed: <b> user-read-private </b>
     * Update current user
     */
    async putCurrentUser(requestParameters: PutCurrentUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.putCurrentUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-read-private </b>
     * Update current user\'s playlists
     */
    async putCurrentUserPlaylistsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserPlaylistDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Me/playlists`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserPlaylistDtoFromJSON));
    }

    /**
     * This endpoint calls Spotify API.<br/>Scopes needed: <b> playlist-read-private </b>
     * Update current user\'s playlists
     */
    async putCurrentUserPlaylists(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserPlaylistDto>> {
        const response = await this.putCurrentUserPlaylistsRaw(initOverrides);
        return await response.value();
    }

}
