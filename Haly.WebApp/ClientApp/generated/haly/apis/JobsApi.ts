/* tslint:disable */
/* eslint-disable */
/**
 * Haly API
 * An ASP.NET Core Web API that adds quality of life improvements to Spotify and helps with music exploration
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Problem,
} from '../models';
import {
    ProblemFromJSON,
    ProblemToJSON,
} from '../models';

export interface GetRequest {
    userId: string;
    xSpotifyToken: string;
}

/**
 * 
 */
export class JobsApi extends runtime.BaseAPI {

    /**
     */
    async getRaw(requestParameters: GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling get.');
        }

        if (requestParameters.xSpotifyToken === null || requestParameters.xSpotifyToken === undefined) {
            throw new runtime.RequiredError('xSpotifyToken','Required parameter requestParameters.xSpotifyToken was null or undefined when calling get.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xSpotifyToken !== undefined && requestParameters.xSpotifyToken !== null) {
            headerParameters['X-Spotify-Token'] = String(requestParameters.xSpotifyToken);
        }

        const response = await this.request({
            path: `/Users/{userId}/Jobs/refetch-playlist-tracks`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async get(requestParameters: GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getRaw(requestParameters, initOverrides);
    }

}
